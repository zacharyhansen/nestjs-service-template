{"version":3,"sources":["../../src/dataset/dataset.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport type { AuthSchema } from 'kysely-codegen';\n\nimport type {\n  DatasetOutput,\n  DataviewOutput,\n  RootDataViewInput,\n} from './dataset.types';\n\nimport { Database } from '~/database/database';\n\n@Injectable()\nexport class DatasetService {\n  constructor(@Inject(Database) private readonly database: Database) {}\n\n  async insertRootDataview({\n    rootDataview,\n    schema,\n    userId,\n  }: {\n    rootDataview: RootDataViewInput;\n    schema: AuthSchema;\n    userId: string;\n  }): Promise<DatasetOutput> {\n    await this.database.transaction().execute(async trx => {\n      const dataview = await trx\n        .insertInto('configuration.dataview')\n        .values({\n          schema,\n          constraint: 'placeholder',\n          dataset_id: rootDataview.datasetId,\n          role_view_name: rootDataview.role_view_name,\n          created_by_id: userId,\n        })\n        .returningAll()\n        .executeTakeFirstOrThrow();\n\n      await trx\n        .updateTable('configuration.dataset')\n        .where('id', '=', dataview.dataset_id)\n        .where('schema', '=', schema)\n        .set({\n          dataview_id: dataview.id,\n        })\n        .execute();\n    });\n    return this.dataset({ datasetId: rootDataview.datasetId, schema });\n  }\n\n  async dataset({\n    datasetId,\n    schema = 'foundation',\n  }: {\n    datasetId: string;\n    schema?: AuthSchema;\n  }): Promise<DatasetOutput> {\n    const [dataset, dataviews] = await Promise.all([\n      this.database\n        .selectFrom('configuration.dataset')\n        .selectAll()\n        .where('schema', '=', schema)\n        .where('id', '=', datasetId)\n        .executeTakeFirstOrThrow(),\n      this.database\n        .selectFrom('configuration.dataview')\n        .selectAll()\n        .where('schema', '=', schema)\n        .where('dataset_id', '=', datasetId)\n        .execute(),\n    ]);\n\n    if (dataviews.length === 0) {\n      return { ...dataset, roleViews: null, dataview: null };\n    }\n\n    const columns = await this.database\n      .selectFrom('configuration.dataview_column')\n      .where('schema', '=', schema)\n      .where(\n        'dataview_id',\n        'in',\n        dataviews.map(dataview => dataview.id)\n      )\n      .selectAll()\n      .orderBy('order', 'asc')\n      .execute();\n\n    const dataviewsWithColumns: DataviewOutput[] = dataviews.map(dataview => ({\n      ...dataview,\n      dataview_column: columns.filter(\n        column => column.dataview_id === dataview.id\n      ),\n    }));\n\n    const result: DatasetOutput = {\n      ...dataset,\n      dataview: DatasetService.resolveDataview({\n        rootDataview: dataviewsWithColumns.find(\n          dataview => dataview.id === dataset.dataview_id\n        ),\n        dataviewsWithColumns,\n      }),\n      roleViews: Array.from(\n        new Set(dataviews.map(view => view.role_view_name))\n      ),\n    };\n    await this.generateQuery({ datasetId: result.id, dataset: result });\n    return result;\n  }\n\n  async generateQuery({\n    datasetId,\n    schema = 'foundation',\n    dataset,\n  }: {\n    datasetId: string;\n    schema?: AuthSchema;\n    dataset?: DatasetOutput;\n  }): Promise<DatasetOutput> {\n    const ds: DatasetOutput =\n      dataset ?? (await this.dataset({ datasetId, schema }));\n\n    if (!ds.dataview) {\n      throw new Error('No root dataview exists for the dataset.');\n    }\n\n    ds.query = DatasetService.processDataviewQuery({\n      dataview: ds.dataview,\n    });\n\n    await this.database\n      .updateTable('configuration.dataset')\n      .where('schema', '=', schema)\n      .where('id', '=', datasetId)\n      .set({\n        query: ds.query,\n      })\n      .execute();\n\n    return ds;\n  }\n\n  static processDataviewQuery({\n    dataview,\n  }: {\n    dataview: DataviewOutput;\n  }): string {\n    const columns = dataview.dataview_column?.map(\n      column => column.role_column_name\n    );\n    const relations = dataview.dataview?.map(\n      dataview =>\n        `${dataview.role_view_name}!${dataview.constraint}(${DatasetService.processDataviewQuery({ dataview })})`\n    );\n    return [...(columns ?? []), ...(relations ?? [])].join(`,\\n`);\n  }\n\n  static resolveDataview({\n    rootDataview,\n    dataviewsWithColumns,\n  }: {\n    rootDataview?: DataviewOutput;\n    dataviewsWithColumns: DataviewOutput[];\n  }): DataviewOutput | null {\n    if (!rootDataview) return null;\n    const queue: DataviewOutput[] = [{ ...rootDataview }];\n    const result = queue[0]!;\n    while (queue.length > 0) {\n      const currentDataview = queue.pop();\n      if (!currentDataview) return result;\n      currentDataview.dataview = dataviewsWithColumns.filter(\n        dataview => dataview.parent_dataview_id === currentDataview.id\n      );\n      queue.push(...currentDataview.dataview);\n    }\n    return result;\n  }\n}\n"],"names":["Inject","Injectable","Database","DatasetService","constructor","database","insertRootDataview","rootDataview","schema","userId","transaction","execute","trx","dataview","insertInto","values","constraint","dataset_id","datasetId","role_view_name","created_by_id","returningAll","executeTakeFirstOrThrow","updateTable","where","set","dataview_id","id","dataset","dataviews","Promise","all","selectFrom","selectAll","length","roleViews","columns","map","orderBy","dataviewsWithColumns","dataview_column","filter","column","result","resolveDataview","find","Array","from","Set","view","generateQuery","ds","Error","query","processDataviewQuery","role_column_name","relations","join","queue","currentDataview","pop","parent_dataview_id","push"],"mappings":"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"}