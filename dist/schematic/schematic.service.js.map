{"version":3,"sources":["../../src/schematic/schematic.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport type {\n  AuthSchema,\n  ConfigurationLink,\n  FoundationRole,\n} from 'kysely-codegen';\nimport type { Insertable, Selectable } from 'kysely';\n\nimport { isM2MRelationCardinality, type SchemaCache } from './schematic.types';\n\nimport { type TDatabase } from '~/database/database';\nimport { EnvService } from '~/env/env.service';\n\nconst SchematicIsNotRoleViewMatch = /^(?!.*__).*$/;\n\n@Injectable()\nexport class SchematicService {\n  private readonly logger = new Logger(SchematicService.name);\n\n  constructor(private readonly envService: EnvService) {}\n\n  async schemaCache() {\n    // @ts-expect-error typeing for this\n    const schemaCache: SchemaCache = await fetch(\n      `${this.envService.get('POSTGREST_ORIGIN')}/schema_cache`,\n      {\n        headers: {\n          'Accept-Profile': 'foundation',\n        },\n      }\n    ).then(response => response.json());\n    return schemaCache;\n  }\n\n  async rootSchematic({ schema }: { schema: AuthSchema }) {\n    return this.schematic({\n      schema,\n      tableMatcher: tableName => SchematicService.isSchematicView(tableName),\n    });\n  }\n\n  async roleSchematic({\n    schema,\n    roleName,\n    views,\n  }: {\n    schema: AuthSchema;\n    roleName: string;\n    views?: (keyof TDatabase)[];\n  }) {\n    return this.schematic({\n      schema,\n      tableMatcher: tableName =>\n        SchematicService.isSchematicRoleView(tableName, roleName),\n      views,\n    });\n  }\n\n  /**\n   * Gets a relevant schematic\n   * @param schema schema to build a schematic for\n   * @param tableMatcher Matched that determines if tables or relationships are relevant to the schematic\n   * @param views A set of views to only do the schematic for (to filter the schematic for)\n   */\n  async schematic({\n    schema,\n    tableMatcher,\n    views,\n  }: {\n    schema: AuthSchema;\n    tableMatcher: (tableName: keyof TDatabase) => boolean;\n    views?: (keyof TDatabase)[];\n  }) {\n    const schemaCache = await this.schemaCache();\n    const schemaCacheMap = new Map(\n      schemaCache.dbTables.map(table => [table[0].qiName, table[1]])\n    );\n\n    const tableFilter = (tableName: keyof TDatabase, schema: AuthSchema) =>\n      views\n        ? tableMatcher(tableName) && views.includes(tableName)\n        : tableMatcher(tableName);\n\n    return {\n      schemaCacheMap,\n      schematicViews: schemaCache.dbTables.filter(table =>\n        tableFilter(\n          table[0].qiName as keyof TDatabase,\n          table[0].qiSchema as AuthSchema\n        )\n      ),\n      schematicLinks: schemaCache.dbRelationships\n        // remove links for anthing but those product or custom views we want to expose\n        .filter(link =>\n          tableFilter(\n            link[0][0].qiName as keyof TDatabase,\n            link[0][1] as AuthSchema\n          )\n        )\n        .flatMap(link => {\n          // filter links to only those product or custom views we want to expose\n          const applicableLinks = link[1].filter(linkItem => {\n            return isM2MRelationCardinality(linkItem.relCardinality)\n              ? tableFilter(\n                  linkItem.relCardinality.contents.junTable\n                    .qiName as keyof TDatabase,\n                  linkItem.relCardinality.contents.junTable\n                    .qiSchema as AuthSchema\n                ) &&\n                  tableFilter(\n                    linkItem.relForeignTable.qiName as keyof TDatabase,\n                    linkItem.relForeignTable.qiSchema as AuthSchema\n                  )\n              : tableFilter(\n                  linkItem.relForeignTable.qiName as keyof TDatabase,\n                  linkItem.relForeignTable.qiSchema as AuthSchema\n                );\n          });\n\n          return applicableLinks.map(linkItem => {\n            if (isM2MRelationCardinality(linkItem.relCardinality)) {\n              return {\n                type: linkItem.relCardinality.tag,\n                pgt_columns: linkItem.relCardinality.contents.junColsSource[0],\n                pgt_columns_2:\n                  linkItem.relCardinality.contents.junColsTarget[0],\n                constraint: linkItem.relCardinality.contents.junConstraint1,\n                constraint_2: linkItem.relCardinality.contents.junConstraint2,\n                source_view_name: linkItem.relTable.qiName,\n                source_column_name:\n                  linkItem.relCardinality.contents.junColsSource[0][0]!,\n                target_view_name: linkItem.relForeignTable.qiName,\n                target_column_name:\n                  linkItem.relCardinality.contents.junColsTarget[0][0]!,\n                junction_view_name:\n                  linkItem.relCardinality.contents.junTable.qiName,\n                junction_source_column_name:\n                  linkItem.relCardinality.contents.junColsSource[0][1],\n                junction_target_column_name:\n                  linkItem.relCardinality.contents.junColsTarget[0][1],\n                pgt_is_self: linkItem.relIsSelf,\n                display_name: linkItem.relCardinality.tag,\n                schema,\n              } satisfies Insertable<ConfigurationLink>;\n            }\n\n            return {\n              type: linkItem.relCardinality.tag,\n              pgt_columns: linkItem.relCardinality.relColumns[0],\n              constraint: linkItem.relCardinality.relCons,\n              source_view_name: linkItem.relTable.qiName,\n              source_column_name: linkItem.relCardinality.relColumns[0][0]!,\n              target_view_name: linkItem.relForeignTable.qiName,\n              target_column_name: linkItem.relCardinality.relColumns[0][1]!,\n              pgt_is_self: linkItem.relIsSelf,\n              display_name: linkItem.relCardinality.tag,\n              schema,\n            } satisfies Insertable<ConfigurationLink>;\n          });\n        }),\n    };\n  }\n\n  static isSchematicView(viewName: string) {\n    return (\n      (viewName.startsWith('_p_') || viewName.startsWith('_c_')) &&\n      SchematicIsNotRoleViewMatch.test(viewName)\n    );\n  }\n\n  static isSchematicRoleView(viewName: string, role: string): boolean {\n    const roleRegex = new RegExp(`__${role}$`);\n    return (\n      (viewName.startsWith('_p_') || viewName.startsWith('_c_')) &&\n      roleRegex.test(viewName)\n    );\n  }\n\n  static viewType(viewName: string) {\n    return viewName.startsWith('_p_') ? 'product' : 'custom';\n  }\n\n  static hasUnderlyingTable(viewName: string) {\n    return viewName.startsWith('_p_');\n  }\n\n  /** Deterministic name of the view based on the role and source view */\n  static roleViewName({\n    rootViewName,\n    role,\n  }: {\n    rootViewName: string;\n    role: Selectable<FoundationRole>;\n  }): keyof TDatabase {\n    return `${rootViewName}__${role.name}` as keyof TDatabase;\n  }\n\n  /** Deterministic name of the root view that role vq_view's are created from */\n  static rootViewName({ tableName }: { tableName: string }): keyof TDatabase {\n    return `_p_${tableName}` as keyof TDatabase;\n  }\n\n  static rootViewFromRoleView({\n    rootView,\n  }: {\n    rootView: keyof TDatabase;\n  }): keyof TDatabase {\n    return rootView.replace(/__.*/, '') as keyof TDatabase;\n  }\n\n  // /**\n  //  * Extracts the primary table (the pg table name) of a view according to our stated view naming conventions\n  //  * @param viewName Name of the view we are trying to get the primary table from\n  //  * @returns table or undefined if none is found\n  //  */\n  // static extractTableNameFromViewName(\n  //   viewName: string | null\n  // ): string | undefined {\n  //   if (!viewName) return undefined;\n  //   const match = /__([^_]*?)__/.exec(viewName);\n  //   return match ? match[1] : undefined;\n  // }\n}\n"],"names":["Injectable","Logger","isM2MRelationCardinality","EnvService","SchematicIsNotRoleViewMatch","SchematicService","constructor","envService","logger","name","schemaCache","fetch","get","headers","then","response","json","rootSchematic","schema","schematic","tableMatcher","tableName","isSchematicView","roleSchematic","roleName","views","isSchematicRoleView","schemaCacheMap","Map","dbTables","map","table","qiName","tableFilter","includes","schematicViews","filter","qiSchema","schematicLinks","dbRelationships","link","flatMap","applicableLinks","linkItem","relCardinality","contents","junTable","relForeignTable","type","tag","pgt_columns","junColsSource","pgt_columns_2","junColsTarget","constraint","junConstraint1","constraint_2","junConstraint2","source_view_name","relTable","source_column_name","target_view_name","target_column_name","junction_view_name","junction_source_column_name","junction_target_column_name","pgt_is_self","relIsSelf","display_name","relColumns","relCons","viewName","startsWith","test","role","roleRegex","RegExp","viewType","hasUnderlyingTable","roleViewName","rootViewName","rootViewFromRoleView","rootView","replace"],"mappings":"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"}