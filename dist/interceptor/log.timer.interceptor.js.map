{"version":3,"sources":["../../src/interceptor/log.timer.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  type NestInterceptor,\n  type ExecutionContext,\n  type CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogTimerInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(LogTimerInterceptor.name);\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const start = Date.now(); // Capture start time\n    console.log('started');\n    return next.handle().pipe(\n      tap(() => {\n        console.log('ended');\n\n        const end = Date.now(); // Capture end time\n        const duration = end - start; // Calculate duration\n        this.logger.log(\n          `Method ${context.getHandler().name} took ${duration}ms`\n        );\n      })\n    );\n  }\n}\n"],"names":["Injectable","Logger","tap","LogTimerInterceptor","intercept","context","next","start","Date","now","console","log","handle","pipe","end","duration","logger","getHandler","name"],"mappings":";;;;;;AAAA,SACEA,UAAU,EAIVC,MAAM,QACD,iBAAiB;AAExB,SAASC,GAAG,QAAQ,iBAAiB;AAGrC,OAAO,MAAMC;IAGXC,UAAUC,OAAyB,EAAEC,IAAiB,EAAmB;QACvE,MAAMC,QAAQC,KAAKC,GAAG,IAAI,qBAAqB;QAC/CC,QAAQC,GAAG,CAAC;QACZ,OAAOL,KAAKM,MAAM,GAAGC,IAAI,CACvBX,IAAI;YACFQ,QAAQC,GAAG,CAAC;YAEZ,MAAMG,MAAMN,KAAKC,GAAG,IAAI,mBAAmB;YAC3C,MAAMM,WAAWD,MAAMP,OAAO,qBAAqB;YACnD,IAAI,CAACS,MAAM,CAACL,GAAG,CACb,CAAC,OAAO,EAAEN,QAAQY,UAAU,GAAGC,IAAI,CAAC,MAAM,EAAEH,SAAS,EAAE,CAAC;QAE5D;IAEJ;;aAhBiBC,SAAS,IAAIf,OAAOE,oBAAoBe,IAAI;;AAiB/D"}